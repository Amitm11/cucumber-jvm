package helpers;

import java.io.File;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Date;

import org.openqa.selenium.WebDriver;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;

public class EvidenceDocumentHelper 
{
	public static String FILE = "D:/SeleniumInstallables/SmokeTestEvidence.pdf";
	public static String filePath;
	
    public static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
            Font.BOLD);
    public static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.NORMAL, BaseColor.RED);
//    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
//            Font.BOLD);
    public static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.BOLD);

    public static void createEvidenceFile(WebDriver driver) throws Throwable 
    {
        try 
        {
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(FILE));
            document.setMargins(26, 26, 26, 26);
            document.open();
            addMetaData(document);
            addTitlePage(document);
            addContent(document);
            document.close();
        } catch (Exception e) 
        {
            e.printStackTrace();
        }
    }

    // iText allows to add metadata to the PDF which can be viewed in your Adobe
    // Reader
    // under File -> Properties
    private static void addMetaData(Document document) 
    {
        document.addTitle("Automation Test Evidence File");
        document.addSubject("Smoke Test");
        document.addKeywords("Vendavo Automated Test Execution");
        document.addAuthor("Amit Maheshwari");
        document.addCreator("Amit Maheshwari");
    }

    private static void addTitlePage(Document document)	throws DocumentException
    {
        // Add one empty line
    	Paragraph newline = new Paragraph(" ");
    	    	
        // Report heading with big and bold fonts
        Paragraph heading = new Paragraph("Vendavo Automated Test Execution Report", catFont);
        heading.setAlignment(Element.ALIGN_MIDDLE);
        heading.setAlignment(Element.ALIGN_CENTER);
        document.add(heading);
        document.add(newline);
        
        // Will create: Report generated by: _name, _date
        Paragraph createdBy = new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
        						smallBold);
        createdBy.setAlignment(Element.ALIGN_CENTER);
        document.add(createdBy);
        document.add(newline);
        document.add(newline);
        document.add(newline);
        
        Paragraph info = new Paragraph("This document created automatically by the automation script and captured step by step screenshots",  redFont);
        info.setAlignment(Element.ALIGN_CENTER);
        document.add(info);
        
        // Start a new page
        document.newPage();
    }

    private static void addContent(Document document) throws Throwable 
    {
        File[] files = sortImages();
        for (int i = files.length; i > 0; i--)
		{   	
//			Writing screenshot name before the image
			System.out.println("Image file name is ::: "+files[(i-1)]);
			String[] fname = files[(i-1)].getName().split(filePath);
			System.out.println("fname ::: "+fname[0]);
			
        	Image img = Image.getInstance(files[(i-1)].toString());
        	img.scaleToFit(525f, 235f);
        	document.add(new Paragraph(fname[0]));
        	document.add(img);
		}
        System.out.println("Content addition done.");
        document.close();
    }
    
    public static void addEmptyLine(Paragraph paragraph, int number)
    {
        for (int i = 0; i < number; i++) 
        {
            paragraph.add(new Paragraph(" "));
        }
    }
    
    public static File[] sortImages() throws Throwable
    {
    	Date date = new Date();
		String timestamp = new SimpleDateFormat("MMMdd").format(date);
		filePath = "./target/screenshots/" + timestamp;
		   
//		Here sorting screenshots based on last modified data
	   	File evdFile = new File(filePath);
		File[] files = evdFile.listFiles();
		Arrays.sort(files, new Comparator<File>() {
			public int compare(File f1, File f2)
			{
				return Long.valueOf(f2.lastModified()).compareTo(f1.lastModified());
			}
		});
		System.out.println("Number of screenshot file ::: "+files.length);
		return files;
    }
}